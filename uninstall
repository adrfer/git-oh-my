#!/usr/bin/env bash

# Confirm uninstall
read -r -p 'Sure to uninstall (y/n [n])? '

if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
  echo 'Ok then, nothing much to see here.'
  exit 0
fi

# Define repository variables
local_repo="${HOME}/.git-oh-my"

# Remove existing files, if any
echo -n 'Removing existing git files...'

if [[ -d "${local_repo}" ]]; then
  rm -rf "${local_repo}"
fi

local_gitconfig="${HOME}/.gitconfig"
local_gitignore="${HOME}/.gitignore"

files=( "${local_gitconfig}" "${local_gitignore}" )

for file in "${files[@]}"; do
  if [[ -L "${file}" ]]; then
    rm -f "${file}"
  fi
done

echo ' done.'

# Restore existing backups, if any
read -r -p 'Check for backups? (y/n [n])? '

if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
  echo 'Ok then, good to go!'
  exit 0
fi

local_repo_backup_pattern='.git-oh-my copy*'
local_repo_backup=$(find "${HOME}" -maxdepth 1 -type d -name "${local_repo_backup_pattern}" | sort -r | head -n1)

if [[ -n "${local_repo_backup}" ]]; then
  read -r -p "Last backup is ${local_repo_backup}. Restore it (y/n [n])? "

  if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
    echo -n 'Restoring backup...'
    mv -f "${local_repo_backup}" "${local_repo}"
    echo ' done.'
  fi
else
  echo 'No backups found.'
fi

echo 'All good, farewell!'
exit 0
