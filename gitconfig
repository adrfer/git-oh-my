
# For more info about `git-config`, open a terminal and run:
#
#   man git-config
#
# or
#
#   git help config
#
# Also, check git-scm.com/docs/git-config.

[user]
  name =
  email =

[alias]

  # Add/remove files to/from next commit
  stage = "!f() { [[ -n "${1}" ]] && git add "${1}" || git add --all; }; f"
  unstage = "!f() { [[ -n "${1}" ]] && git reset HEAD -- "${1}" || git reset HEAD; }; f"

  # Discard changes in working directory
  discard-modified = "!f() { [[ -n "${1}" ]] && git checkout -- "${1}" || git checkout .; }; f"
  discard-modified-and-staged = !git clean -dfx && git checkout .

  # Rename and stage file for commit
  rename-and-stage = mv #<old file> <new file>

  # Delete and stage file for commit
  delete-and-stage = rm #<file>

  # Save work in progress for future commit
  stash-modified = stash
  stash-modified-and-untracked = stash --include-untracked
  show-stashed = stash list
  delete-stashed = stash clear
  pop-stashed = stash pop

  # Show unstaged and staged changes since last commit
  diff-modified = diff
  diff-staged = diff --staged

  # Commit staged content
  commit-staged = commit --message #<message>
  commit-modified-and-deleted-but-not-untracked = commit --all --message #<message>
  commit-modified-staged-and-deleted = !git add --all && git commit-staged #<message>
  commit-by-amending-last-commit-message = commit --amend

  # Undo committed content
  undo-last-commit-but-keep-it-staged = reset --soft HEAD~1
  undo-last-commit-for-good = reset --hard HEAD~1

  # Push and track new local branch
  push-and-track-local-branch = push --set-upstream origin #<branch>

  # Manipulate local and remote branches
  show-branches = branch --all
  switch-to-local-branch = checkout #<branch>
  switch-to-previous-local-branch = checkout -
  create-and-switch-to-local-branch = checkout -b #<branch>
  delete-local-branch = branch --delete #<branch>
  delete-remote-branch = push origin --delete #<branch>
  delete-obsolete-local-remote-tracking-branches = fetch origin --prune
  show-branches-merged-into-master = branch --merged master
  show-number-of-commits-on-branch = rev-list --count #<branch>
  rename-local-branch = branch --move #<current branch> or <old branch> <new branch>
  rename-remote-branch = "!f() { [[ -n "${1}" ]] && git rename-local-branch "${1}" && git delete-remote-branch "${1}" && git push-and-track-local-branch "${1}"; }; f"

  # List and delete ignored files that are still lurking around
  show-ignored-still-around = ls-files --ignored --exclude-from=.gitignore
  delete-ignored-still-around = !git rm -r --cached . && git stage . && git commit-staged #<message>

  # List files under/not under version control
  show-whatever-is-under-version-control = ls-files
  show-whatever-is-not-under-version-control = ls-files --others

  # Show the commit history for the currently active branch
  log-last-commit = log --max-count 1
  log-contributors = shortlog --summary --numbered
  log-pretty = log --pretty=format:'%C(auto)%h %C(reset)%s %C(blue)(%cr) %C(red)<%an>'
  log-commits-that-modified-file = log --oneline --follow #<file>
  log-commits-not-yet-pushed = log origin/master..master
  log-commits-from-today = log --since='midnight'
  log-commits-from-yesterday = log --since='yesterday' --until='midnight'
  log-commits-since-one-week-ago = log --since='1 week ago'
  log-commits-since-one-month-ago = log --since='1 month ago'

  # List and delete tags
  show-tags = tag --list
  delete-local-tag = tag --delete #<tag>
  delete-remote-tag = "!f() { [[ -n "${1}" ]] && git delete-local-tag "${1}" && git push origin :refs/tags/"${1}"; }; f"

  # List all aliases
  show-aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort

[color]

  # Highlight grep matches
  grep = always

[core]

  # Paginate using the specified pager
  pager = less

  # Edit commit messages by launching the specified editor
  editor = vim

  # Highlight common whitespace problems when using git diff
  whitespace = trailing-space

  # Prevent CRLFs from getting written into the repository by converting them to LF
  autocrlf = input

  # Set globally patterns of files which are not meant to be tracked
  excludesfile = ~/.gitignore

[push]

  # Set push behavior to fail if the current branch is not tracking a remote
  default = simple

[merge]

  # Allow only fast-forward merges
  ff = only

[help]

  # Correct and execute automatically mistyped git commands, if not ambiguously
  autocorrect = 50
