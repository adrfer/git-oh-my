# For more info about `git-config`, open a terminal and run:
#
#   man git-config
#
# or
#
#   git help config
#
# Also, check git-scm.com/docs/git-config.

[user]
  name =
  email =

[alias]

  # Add/remove files to/from next commit
  stage = add #<file or dir>
  stage-all = add .
  unstage = reset HEAD -- #<file>
  unstage-all = reset HEAD

  # Discard changes in working directory
  discard-modified-but-not-staged = checkout -- #<file>
  discard-all-modified-but-not-staged = checkout .

  # Change an existing file path and stage the move
  rename-and-stage = mv #<old file> <new file>

  # Delete the file and stage the removal for commit
  delete-and-stage = rm #<file>

  # Diff changes of what is staged and unstaged
  show-modified-but-not-staged = diff
  show-staged-but-not-commited = diff --staged

  # Commit staged content as a new commit
  commit-staged = commit --message #<message>
  commit-modified-and-staged = commit --all --message #<message>
  commit-modified-staged-and-removed = !git add --all && git commit-modified-and-staged #<message>
  commit-by-amending-last-commit-message = commit --amend

  # Undo commited content locally
  undo-last-commit-but-keep-staged = reset --soft HEAD~1
  undo-last-commit-for-good = reset --hard HEAD~1

  # List and delete local and remote branches
  show-branches = branch --all
  create-and-checkout-branch = checkout -b #<branch>
  delete-local-branch = branch --delete #<branch>
  delete-remote-branch = push origin --delete #<branch>
  delete-obsolete-local-remote-tracking-branches = fetch origin --prune

  # List and delete ignored files that are still lurking at the repository
  show-ignored-still-at-the-repository = ls-files --ignored --exclude-from=.gitignore
  delete-ignored-still-at-the-repository = !git rm -r --cached . && git stage-all && git commit-staged #<message>

  # Show the commit history for the currently active branch
  log-last-commit = log -1
  log-contributors = shortlog --summary --numbered
  log-pretty = log --pretty=format:'%C(auto)%h %C(reset)%s %C(blue)(%cr) %C(red)<%an>'
  log-commits-that-modified-file = log --oneline --follow #<file>
  log-commits-not-yet-pushed = !git log-pretty origin/master..master
  log-commits-from-today = !git log-pretty --since='midnight'
  log-commits-from-yesterday = !git log-pretty --since='yesterday' --until='midnight'
  log-commits-since-one-week-ago = !git log-pretty --since='1 week ago'
  log-commits-since-one-month-ago = !git log-pretty --since='1 month ago'

  # List all defined remotes
  show-remotes = remote --verbose

  # List all created tags
  show-tags = tag --list

  # List all defined aliases
  show-aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort

[color]
  ui = auto
  
  # Highlight grep matches
  grep = always

[core]
  
  # Paginate using the pager specified
  pager = less
  
  # Edit commit messages by launching the editor specified
  editor = vim

  # Highlight common whitespace problems when using git diff
  whitespace = trailing-space

  # Prevent CRLFs from getting written into the repository by converting them to LF
  autocrlf = input

  # Set globally patterns of files which are not meant to be tracked
  excludesfile = ~/.gitignore

[push]

  # Set push behavior to fail if the current branch is not tracking a remote upstream branch
  default = simple

[merge]
  
  ff = only
  
[help]

  # Correct and execute automatically mistyped git commands, if not ambiguously
  autocorrect = 1
