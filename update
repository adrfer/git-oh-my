#!/usr/bin/env bash

# Check if git is available
if ! command -v 'git' >/dev/null 2>&1; then
  echo 'Ooops, git not found.'
  echo 'Go to https://git-scm.com for more info.'
  exit 1
fi

# Define repository variables
remote_repo='https://github.com/adrfer/git-oh-my.git'
local_repo="${HOME}/.git-oh-my"

# Download remote files
if [[ ! -d "${local_repo}" ]]; then
  echo -n "Ooops, local repo ${local_repo} not found. "
  read -r -p 'Clone it (y/n [n])? '

  if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
    echo 'Ok then, nothing much to see here.'
    exit 0
  fi

  echo -n "Cloning repo into ${local_repo}..."

  if git clone --quiet "${remote_repo}" "${local_repo}" >/dev/null 2>&1; then
    echo ' done.'
  else
    echo
    echo 'Ooops, there was an error, try again.'
    exit 1
  fi
else
  echo -n "Backing up ${local_repo}..."
  cp -rf "${local_repo%/}"{," copy $(date +%s)"}
  echo ' done.'
fi

# Save credentials, if any
name="$(git config user.name)"
email="$(git config user.email)"

# Update local files
cd "${local_repo}"

echo -n "Updating local repo ${local_repo}..."

# After installing or updating the repo will be dirty since one will have configured the credentials
if git checkout --quiet . >/dev/null 2>&1 && git pull --quiet origin master >/dev/null 2>&1; then
  echo ' done.'
  cd - >/dev/null 2>&1
else
  echo
  echo 'Ooops, there was an error, try again.'
  exit 1
fi

# Define variables for files
remote_gitconfig="${local_repo}/gitconfig"
remote_gitignore="${local_repo}/gitignore"

local_gitconfig="${HOME}/.gitconfig"
local_gitignore="${HOME}/.gitignore"

# Link local files
ln -sf "${remote_gitconfig}" "${local_gitconfig}"
ln -sf "${remote_gitignore}" "${local_gitignore}"

# Setup credentials
echo 'Now, updating your credentials...'

name_prompt='Your name: '

if [[ -n "${name}" ]]; then
  echo -n "Last configured name is ${name}. "
  read -r -p 'Keep it (y/n [n])? '

  if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
    read -r -p "${name_prompt}" name
  fi
else
  read -r -p "${name_prompt}" name
fi

git config --global user.name "${name}"

email_prompt='Your email: '

if [[ -n "${email}" ]]; then
  echo -n "Last configured email is ${email}. "
  read -r -p 'Keep it (y/n [n])? '

  if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
    read -r -p "${email_prompt}" email
  fi
else
  read -r -p "${email_prompt}" email
fi

git config --global user.email "${email}"

echo 'Update successful, enjoy!'
exit 0
